{"o_vars":null,"o_types":[[{"spanInfo":{"startLine":68,"endLine":68,"endCol":59,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Internal.Util.$fNormedVector4","{v : (Internal.Util.Normed (Data.Vector.Storable.Vector GHC.Types.Double)) | v == $fNormedVector4}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":29,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808454","(Data.Vector.Storable.Vector GHC.Types.Double)"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":56,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808412","(Data.Vector.Storable.Vector GHC.Types.Char)"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":38,"startCol":37,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808485","{v : GHC.Types.Double | v == 5.0}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":64,"startCol":44,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808484","(Data.Vector.Storable.Vector a)"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":56,"startCol":54,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808439","{v : GHC.Types.Double | v == 10.0}"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":29,"startCol":14,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808403","x1:{v : (Data.Vector.Storable.Vector GHC.Types.Char) | slen v >= 0} -> {v : GHC.Types.Int | v >= 0\n                                                                                            && v <= slen x1} -> GHC.Types.Char"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test3","GHC.Types.Double"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":28,"startCol":26,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808432","{v : GHC.Types.Double | v == 20.0}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":36,"startCol":35,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808501","{v : GHC.Types.Double | v == 1.0}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":23,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808498","GHC.Types.Int"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":59,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base.$","{VV : forall a b c . (c -> c) -> c -> c | VV == $}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":64,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base.$","{VV : forall a b c . (c -> c) -> c -> c | VV == $}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":43,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808509","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":42,"startCol":41,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808504","{v : GHC.Types.Double | v == 4.0}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":38,"startCol":36,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808486","GHC.Types.Double"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":55,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Internal.Numeric.$fNumericDouble","{v : (Internal.Numeric.Numeric GHC.Types.Double) | v == $fNumericDouble}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":43,"startCol":42,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808515","{v : GHC.Types.Double | v == 2.0}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":22,"startCol":21,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808512","GHC.Types.Int"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":41,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808473","{v : (Data.Vector.Storable.Vector a) | slen v >= 0} -> (Internal.Matrix.Matrix a)"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":31,"startCol":30,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808405","GHC.Types.Int"]]],[{"spanInfo":{"startLine":1,"endLine":1,"endCol":1,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.$trModule","GHC.Types.Module"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":63,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Internal.Numeric.$fNumericDouble","{v : (Internal.Numeric.Numeric GHC.Types.Double) | v == $fNumericDouble}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test5","(Data.Vector.Storable.Vector GHC.Types.Double)"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test6","forall a .\n(Internal.Numeric.Product<[]> a) =>\n(Internal.Matrix.Matrix a)"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":63,"startCol":62,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808479","a"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":32,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808438","(Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":58,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808494","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":41,"startCol":39,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808488","GHC.Types.Double"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":39,"startCol":38,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808467","a"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":62,"startCol":60,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808441","{v : GHC.Types.Double | v == 30.0}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":44,"startCol":43,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808489","{v : GHC.Types.Double | v == 5.0}"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":49,"startCol":48,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808423","{v : GHC.Types.Double | v == 2.0}"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":27,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Foreign.Storable.$fStorableDouble","{v : (Foreign.Storable.Storable GHC.Types.Double) | v == $fStorableDouble}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":41,"startCol":19,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808472","(Data.Vector.Storable.Vector a)"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":50,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Internal.Numeric.$fNumericDouble","{v : (Internal.Numeric.Numeric GHC.Types.Double) | v == $fNumericDouble}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":11,"startCol":10,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808428","GHC.Types.Int"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":25,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808422","(Data.Vector.Storable.Vector GHC.Types.Double)"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test8","(Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":31,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808406","(Data.Vector.Storable.Vector GHC.Types.Char) -> GHC.Types.Char"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":20,"startCol":19,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808430","GHC.Types.Int"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":23,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808396","{v : GHC.Integer.Type.Integer | v == 0}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":61,"startCol":51,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808401","(Internal.Matrix.Matrix a) -> [(Data.Vector.Storable.Vector a)]"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":22,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808513","(Data.Vector.Storable.Vector GHC.Types.Double) -> (Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":56,"startCol":47,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808411","[GHC.Types.Char]"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":45,"startCol":44,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808516","{v : GHC.Types.Double | v == 3.0}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":26,"startCol":25,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808448","{v : GHC.Types.Double | v == 2.0}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":43,"startCol":21,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808510","(Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":59,"startCol":38,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808522","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":39,"startCol":38,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808456","GHC.Types.Int"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":47,"startCol":37,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808399","x1:(Data.Vector.Storable.Vector a) -> {v : [a] | slen x1 == len v}"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":25,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808421","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":41,"startCol":40,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808514","{v : GHC.Types.Double | v == 1.0}"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test1","GHC.Types.Char"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":31,"startCol":29,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808433","{v : GHC.Types.Double | v == 30.0}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":24,"startCol":13,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808398","[a] -> GHC.Types.Bool"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":11,"startCol":10,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808414","GHC.Types.Int"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":63,"startCol":40,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808446","(Data.Vector.Storable.Vector GHC.Types.Double)"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test2","(Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":50,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808426","(Data.Vector.Storable.Vector GHC.Types.Double)"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":32,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808437","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":24,"startCol":23,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808419","{v : GHC.Types.Double | v == 1.0}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":61,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base..","{VV : forall a\n             b\n             c <r :: c b -> Bool, q :: c c -> Bool, p :: c b -> Bool>.\n      {xcmp :: c, wcmp :: {VV : c<q xcmp> | true} |- {VV : b<p wcmp> | true} <: {VV : b<r xcmp> | true}} =>\n      (ycmp:c -> {VV : b<p ycmp> | true}) -> (zcmp:c -> {VV : c<q zcmp> | true}) -> xcmp:c -> {VV : b<r xcmp> | true} | VV == .}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":41,"startCol":40,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808487","{v : GHC.Types.Double | v == 5.0}"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":56,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base.$","{VV : forall a b c . (c -> c) -> c -> c | VV == $}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":32,"startCol":31,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808500","GHC.Types.Int"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":38,"startCol":37,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808502","{v : GHC.Types.Double | v == 9.0}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":40,"startCol":39,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808503","{v : GHC.Types.Double | v == 1.0}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":40,"startCol":33,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808471","[a]"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":64,"startCol":57,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808483","[a]"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test4","(Data.Vector.Storable.Vector GHC.Types.Double)"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":59,"startCol":25,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808523","(Data.Vector.Storable.Vector GHC.Types.Double)"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":44,"startCol":42,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808490","GHC.Types.Double"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":18,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808496","{v : (Internal.Matrix.Matrix GHC.Types.Double) | natMatrix v} -> (Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":28,"startCol":27,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808449","{v : GHC.Types.Double | v == 3.0}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":48,"startCol":47,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808458","GHC.Types.Int"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":24,"startCol":23,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808447","{v : GHC.Types.Double | v == 1.0}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":55,"startCol":50,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808460","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":43,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base.$","{VV : forall a b c . (c -> c) -> c -> c | VV == $}"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":50,"startCol":47,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808425","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":52,"startCol":51,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808459","{v : GHC.Types.Double | v == 1.0}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":47,"startCol":46,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808517","{v : GHC.Types.Double | v == 4.0}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":61,"startCol":60,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808477","a"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":27,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808418","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":20,"startCol":19,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808416","GHC.Types.Int"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":59,"startCol":58,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808475","a"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":24,"startCol":17,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808397","a -> GHC.Types.Bool"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":24,"startCol":23,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808417","{v : GHC.Types.Double | v == 1.0}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":35,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808463","a"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":37,"startCol":36,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808465","a"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":47,"startCol":27,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808400","[(Data.Vector.Storable.Vector a)] -> [a]"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":55,"startCol":52,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808408","{v : GHC.Types.Char | v == (lit \"50\" Char)}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test7","GHC.Types.Double"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":51,"startCol":48,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808407","{v : GHC.Types.Char | v == (lit \"49\" Char)}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":29,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808453","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":55,"startCol":37,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808461","(Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":10,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.natMatrix","forall a .\n(GHC.Classes.Ord<[]> a, GHC.Num.Num<[]> a, Foreign.Storable.Storable<[]> a, Internal.Matrix.Element<[]> a) =>\n(Internal.Matrix.Matrix a) -> GHC.Types.Bool"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":61,"startCol":27,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808402","(Internal.Matrix.Matrix a) -> [a]"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":63,"startCol":53,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808445","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test9","(Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":25,"startCol":23,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808431","{v : GHC.Types.Double | v == 10.0}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":59,"startCol":57,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808440","{v : GHC.Types.Double | v == 20.0}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":59,"startCol":20,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808495","(Data.Vector.Storable.Vector GHC.Types.Double)"]]]],"o_templs":[[{"spanInfo":{"startLine":68,"endLine":68,"endCol":59,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Internal.Util.$fNormedVector4","{lq_tmp$x##2611 : (Internal.Util.Normed (Data.Vector.Storable.Vector GHC.Types.Double)) | lq_tmp$x##2611 == Internal.Util.$fNormedVector4}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":29,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808454","{lq_tmp$x##1880 : (Data.Vector.Storable.Vector GHC.Types.Double) | slen lq_tmp$x##1880 == len lq_anf$##7205759403792808453##d3Rz}"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":56,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808412","{lq_tmp$x##1137 : (Data.Vector.Storable.Vector GHC.Types.Char) | slen lq_tmp$x##1137 == len lq_anf$##7205759403792808411##d3QT}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":38,"startCol":37,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808485","{lq_tmp$x##2417 : GHC.Types.Double | lq_tmp$x##2417 == 5.0}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":64,"startCol":44,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808484","{lq_tmp$x##2366 : (Data.Vector.Storable.Vector a) | slen lq_tmp$x##2366 == len lq_anf$##7205759403792808483##d3S3}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":56,"startCol":54,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808439","{lq_tmp$x##1587 : GHC.Types.Double | lq_tmp$x##1587 == 10.0}"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":29,"startCol":14,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808403","lq_tmp$x##993:{lq_tmp$x##986 : (Data.Vector.Storable.Vector GHC.Types.Char) | slen lq_tmp$x##986 >= 0} -> lq_tmp$x##994:{lq_tmp$x##987 : GHC.Types.Int | lq_tmp$x##987 >= 0\n                                                                                                                                                         && lq_tmp$x##987 <= slen lq_tmp$x##993} -> GHC.Types.Char"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test3","GHC.Types.Double"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":28,"startCol":26,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808432","{lq_tmp$x##1441 : GHC.Types.Double | lq_tmp$x##1441 == 20.0}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":36,"startCol":35,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808501","{lq_tmp$x##2646 : GHC.Types.Double | lq_tmp$x##2646 == 1.0}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":23,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808498","{lq_tmp$x##2632 : GHC.Types.Int | lq_tmp$x##2632 == lq_anf$##7205759403792808497##d3Sh}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":59,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base.$","{VV : forall r a b .\n      lq_tmp$x##3081:(lq_tmp$x##3080:a -> b) -> lq_tmp$x##3082:a -> b | VV == GHC.Base.$}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":64,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base.$","{VV : forall r a b .\n      lq_tmp$x##2390:(lq_tmp$x##2389:a -> b) -> lq_tmp$x##2391:a -> b | VV == GHC.Base.$}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":43,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808509","{lq_tmp$x##2780 : [{lq_tmp$x##2790 : GHC.Types.Double | $k_##2789[VV##2788:=lq_tmp$x##2790][lq_tmp$x##2784:=lq_anf$##7205759403792808501##d3Sl][lq_tmp$x##2785:=lq_anf$##7205759403792808508##d3Ss]}]<\\lq_tmp$x##2787 VV -> {lq_tmp$x##2790 : GHC.Types.Double | $k_##2792[VV##2791:=lq_tmp$x##2790][lq_tmp$x##2784:=lq_anf$##7205759403792808501##d3Sl][lq_tmp$x##2785:=lq_anf$##7205759403792808508##d3Ss][lq_tmp$x##2793:=lq_tmp$x##2787]}> | tail lq_tmp$x##2780 == lq_anf$##7205759403792808508##d3Ss\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && head lq_tmp$x##2780 == lq_anf$##7205759403792808501##d3Sl\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && len lq_tmp$x##2780 == 1 + len lq_anf$##7205759403792808508##d3Ss}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":42,"startCol":41,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808504","{lq_tmp$x##2664 : GHC.Types.Double | lq_tmp$x##2664 == 4.0}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":38,"startCol":36,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808486","{lq_tmp$x##2430 : GHC.Types.Double | lq_tmp$x##2430 == (-lq_anf$##7205759403792808485##d3S5)}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":55,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Internal.Numeric.$fNumericDouble","{lq_tmp$x##1982 : (Internal.Numeric.Numeric GHC.Types.Double) | lq_tmp$x##1982 == Internal.Numeric.$fNumericDouble}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":43,"startCol":42,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808515","{lq_tmp$x##2900 : GHC.Types.Double | lq_tmp$x##2900 == 2.0}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":22,"startCol":21,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808512","{lq_tmp$x##2870 : GHC.Types.Int | lq_tmp$x##2870 == lq_anf$##7205759403792808511##d3Sv}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":41,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808473","lq_tmp$x##2204:{lq_tmp$x##2196 : (Data.Vector.Storable.Vector a) | slen lq_tmp$x##2196 >= 0\n                                                                   && slen lq_anf$##7205759403792808472##d3RS == slen lq_tmp$x##2196} -> (Internal.Matrix.Matrix a)"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":31,"startCol":30,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808405","{lq_tmp$x##1002 : GHC.Types.Int | lq_tmp$x##1002 == lq_anf$##7205759403792808404##d3QM}"]]],[{"spanInfo":{"startLine":1,"endLine":1,"endCol":1,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.$trModule","{VV##3107 : GHC.Types.Module | $k_##3108}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":63,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Internal.Numeric.$fNumericDouble","{lq_tmp$x##1746 : (Internal.Numeric.Numeric GHC.Types.Double) | lq_tmp$x##1746 == Internal.Numeric.$fNumericDouble}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test5","(Data.Vector.Storable.Vector GHC.Types.Double)"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test6","forall a .\n(Internal.Numeric.Product<[]> a) =>\n(Internal.Matrix.Matrix a)"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":63,"startCol":62,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808479","{lq_tmp$x##2251 : a | lq_tmp$x##2251 == lq_anf$##7205759403792808478##d3RY}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":32,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808438","{lq_tmp$x##1564 : (Internal.Matrix.Matrix GHC.Types.Double) | cols lq_tmp$x##1564 == lq_anf$##7205759403792808430##d3Rc\n                                                              && rows lq_tmp$x##1564 == lq_anf$##7205759403792808428##d3Ra}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":58,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808494","{lq_tmp$x##2554 : [{lq_tmp$x##2564 : GHC.Types.Double | $k_##2563[VV##2562:=lq_tmp$x##2564][lq_tmp$x##2558:=lq_anf$##7205759403792808486##d3S6][lq_tmp$x##2559:=lq_anf$##7205759403792808493##d3Sd]}]<\\lq_tmp$x##2561 VV -> {lq_tmp$x##2564 : GHC.Types.Double | $k_##2566[VV##2565:=lq_tmp$x##2564][lq_tmp$x##2558:=lq_anf$##7205759403792808486##d3S6][lq_tmp$x##2559:=lq_anf$##7205759403792808493##d3Sd][lq_tmp$x##2567:=lq_tmp$x##2561]}> | tail lq_tmp$x##2554 == lq_anf$##7205759403792808493##d3Sd\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && head lq_tmp$x##2554 == lq_anf$##7205759403792808486##d3S6\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && len lq_tmp$x##2554 == 1 + len lq_anf$##7205759403792808493##d3Sd}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":41,"startCol":39,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808488","{lq_tmp$x##2449 : GHC.Types.Double | lq_tmp$x##2449 == (-lq_anf$##7205759403792808487##d3S7)}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":39,"startCol":38,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808467","{lq_tmp$x##2060 : a | lq_tmp$x##2060 == lq_anf$##7205759403792808466##d3RM}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":62,"startCol":60,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808441","{lq_tmp$x##1599 : GHC.Types.Double | lq_tmp$x##1599 == 30.0}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":44,"startCol":43,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808489","{lq_tmp$x##2455 : GHC.Types.Double | lq_tmp$x##2455 == 5.0}"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":49,"startCol":48,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808423","{lq_tmp$x##1326 : GHC.Types.Double | lq_tmp$x##1326 == 2.0}"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":27,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Foreign.Storable.$fStorableDouble","{lq_tmp$x##1244 : (Foreign.Storable.Storable GHC.Types.Double) | lq_tmp$x##1244 == Foreign.Storable.$fStorableDouble}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":41,"startCol":19,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808472","{lq_tmp$x##2175 : (Data.Vector.Storable.Vector a) | slen lq_tmp$x##2175 == len lq_anf$##7205759403792808471##d3RR}"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":50,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Internal.Numeric.$fNumericDouble","{lq_tmp$x##1412 : (Internal.Numeric.Numeric GHC.Types.Double) | lq_tmp$x##1412 == Internal.Numeric.$fNumericDouble}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":11,"startCol":10,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808428","{lq_tmp$x##1421 : GHC.Types.Int | lq_tmp$x##1421 == lq_anf$##7205759403792808427##d3R9}"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":25,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808422","{lq_tmp$x##1309 : (Data.Vector.Storable.Vector GHC.Types.Double) | slen lq_tmp$x##1309 == len lq_anf$##7205759403792808421##d3R3}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test8","(Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":31,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808406","lq_tmp$x##1022:{lq_tmp$x##1028 : (Data.Vector.Storable.Vector {lq_tmp$x##1027 : GHC.Types.Char | $k_##1024[VV##1023:=lq_tmp$x##1027][VV##1025:=lq_tmp$x##1028][lq_tmp$x##1020:=lq_anf$##7205759403792808403##d3QL][lq_tmp$x##1021:=lq_anf$##7205759403792808405##d3QN]}) | $k_##1026[VV##1025:=lq_tmp$x##1028][lq_tmp$x##1020:=lq_anf$##7205759403792808403##d3QL][lq_tmp$x##1021:=lq_anf$##7205759403792808405##d3QN]} -> {lq_tmp$x##1034 : GHC.Types.Char | $k_##1033[VV##1032:=lq_tmp$x##1034][lq_tmp$x##1020:=lq_anf$##7205759403792808403##d3QL][lq_tmp$x##1021:=lq_anf$##7205759403792808405##d3QN]}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":20,"startCol":19,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808430","{lq_tmp$x##1429 : GHC.Types.Int | lq_tmp$x##1429 == lq_anf$##7205759403792808429##d3Rb}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":23,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808396","{lq_tmp$x##662 : GHC.Integer.Type.Integer | lq_tmp$x##662 == 0}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":61,"startCol":51,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808401","lq_tmp$x##813:(Internal.Matrix.Matrix t) -> [(Data.Vector.Storable.Vector t)]"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":22,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808513","lq_tmp$x##2887:{lq_tmp$x##2879 : (Data.Vector.Storable.Vector GHC.Types.Double) | slen lq_tmp$x##2879 >= lq_anf$##7205759403792808512##d3Sw} -> (Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":56,"startCol":47,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808411","{lq_tmp$x##1108 : [{lq_tmp$x##1118 : GHC.Types.Char | $k_##1117[VV##1116:=lq_tmp$x##1118][lq_tmp$x##1112:=lq_anf$##7205759403792808407##d3QP][lq_tmp$x##1113:=lq_anf$##7205759403792808410##d3QS]}]<\\lq_tmp$x##1115 VV -> {lq_tmp$x##1118 : GHC.Types.Char | $k_##1120[VV##1119:=lq_tmp$x##1118][lq_tmp$x##1112:=lq_anf$##7205759403792808407##d3QP][lq_tmp$x##1113:=lq_anf$##7205759403792808410##d3QS][lq_tmp$x##1121:=lq_tmp$x##1115]}> | tail lq_tmp$x##1108 == lq_anf$##7205759403792808410##d3QS\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && head lq_tmp$x##1108 == lq_anf$##7205759403792808407##d3QP\n                                                                                                                                                                                                                                                                                                                                                                                                                                             && len lq_tmp$x##1108 == 1 + len lq_anf$##7205759403792808410##d3QS}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":45,"startCol":44,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808516","{lq_tmp$x##2906 : GHC.Types.Double | lq_tmp$x##2906 == 3.0}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":26,"startCol":25,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808448","{lq_tmp$x##1759 : GHC.Types.Double | lq_tmp$x##1759 == 2.0}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":43,"startCol":21,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808510","{lq_tmp$x##2811 : (Internal.Matrix.Matrix GHC.Types.Double) | cols lq_tmp$x##2811 == lq_anf$##7205759403792808500##d3Sk\n                                                              && rows lq_tmp$x##2811 == lq_anf$##7205759403792808498##d3Si}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":59,"startCol":38,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808522","{lq_tmp$x##3028 : [{lq_tmp$x##3038 : GHC.Types.Double | $k_##3037[VV##3036:=lq_tmp$x##3038][lq_tmp$x##3032:=lq_anf$##7205759403792808514##d3Sy][lq_tmp$x##3033:=lq_anf$##7205759403792808521##d3SF]}]<\\lq_tmp$x##3035 VV -> {lq_tmp$x##3038 : GHC.Types.Double | $k_##3040[VV##3039:=lq_tmp$x##3038][lq_tmp$x##3032:=lq_anf$##7205759403792808514##d3Sy][lq_tmp$x##3033:=lq_anf$##7205759403792808521##d3SF][lq_tmp$x##3041:=lq_tmp$x##3035]}> | tail lq_tmp$x##3028 == lq_anf$##7205759403792808521##d3SF\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && head lq_tmp$x##3028 == lq_anf$##7205759403792808514##d3Sy\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && len lq_tmp$x##3028 == 1 + len lq_anf$##7205759403792808521##d3SF}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":39,"startCol":38,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808456","{lq_tmp$x##1899 : GHC.Types.Int | lq_tmp$x##1899 == lq_anf$##7205759403792808455##d3RB}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":47,"startCol":37,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808399","lq_tmp$x##742:(Data.Vector.Storable.Vector t) -> {lq_tmp$x##738 : [t] | slen lq_tmp$x##742 == len lq_tmp$x##738}"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":25,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808421","{lq_tmp$x##1280 : [{lq_tmp$x##1290 : GHC.Types.Double | $k_##1289[VV##1288:=lq_tmp$x##1290][lq_tmp$x##1284:=lq_anf$##7205759403792808419##d3R1][lq_tmp$x##1285:=lq_anf$##7205759403792808420##d3R2]}]<\\lq_tmp$x##1287 VV -> {lq_tmp$x##1290 : GHC.Types.Double | $k_##1292[VV##1291:=lq_tmp$x##1290][lq_tmp$x##1284:=lq_anf$##7205759403792808419##d3R1][lq_tmp$x##1285:=lq_anf$##7205759403792808420##d3R2][lq_tmp$x##1293:=lq_tmp$x##1287]}> | tail lq_tmp$x##1280 == lq_anf$##7205759403792808420##d3R2\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && head lq_tmp$x##1280 == lq_anf$##7205759403792808419##d3R1\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && len lq_tmp$x##1280 == 1 + len lq_anf$##7205759403792808420##d3R2}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":41,"startCol":40,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808514","{lq_tmp$x##2894 : GHC.Types.Double | lq_tmp$x##2894 == 1.0}"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test1","GHC.Types.Char"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":31,"startCol":29,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808433","{lq_tmp$x##1447 : GHC.Types.Double | lq_tmp$x##1447 == 30.0}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":24,"startCol":13,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808398","lq_tmp$x##714:[{lq_tmp$x##720 : t | $k_##719[VV##718:=lq_tmp$x##720][lq_tmp$x##712:=Data.Foldable.$36$fFoldable$91$$93$][lq_tmp$x##713:=lq_anf$##7205759403792808397##d3QF]}] -> GHC.Types.Bool"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":11,"startCol":10,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808414","{lq_tmp$x##1186 : GHC.Types.Int | lq_tmp$x##1186 == lq_anf$##7205759403792808413##d3QV}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":63,"startCol":40,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808446","{lq_tmp$x##1714 : (Data.Vector.Storable.Vector GHC.Types.Double) | slen lq_tmp$x##1714 == len lq_anf$##7205759403792808445##d3Rr}"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test2","(Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":50,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808426","{lq_tmp$x##1381 : (Data.Vector.Storable.Vector GHC.Types.Double) | slen lq_tmp$x##1381 == len lq_anf$##7205759403792808425##d3R7}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":32,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808437","{lq_tmp$x##1533 : [{lq_tmp$x##1543 : GHC.Types.Double | $k_##1542[VV##1541:=lq_tmp$x##1543][lq_tmp$x##1537:=lq_anf$##7205759403792808431##d3Rd][lq_tmp$x##1538:=lq_anf$##7205759403792808436##d3Ri]}]<\\lq_tmp$x##1540 VV -> {lq_tmp$x##1543 : GHC.Types.Double | $k_##1545[VV##1544:=lq_tmp$x##1543][lq_tmp$x##1537:=lq_anf$##7205759403792808431##d3Rd][lq_tmp$x##1538:=lq_anf$##7205759403792808436##d3Ri][lq_tmp$x##1546:=lq_tmp$x##1540]}> | tail lq_tmp$x##1533 == lq_anf$##7205759403792808436##d3Ri\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && head lq_tmp$x##1533 == lq_anf$##7205759403792808431##d3Rd\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && len lq_tmp$x##1533 == 1 + len lq_anf$##7205759403792808436##d3Ri}"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":24,"startCol":23,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808419","{lq_tmp$x##1254 : GHC.Types.Double | lq_tmp$x##1254 == 1.0}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":61,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base..","{VV : forall b\n             c\n             a <r :: a c -> Bool, q :: a b -> Bool, p :: b c -> Bool>.\n      {xcmp :: a, wcmp :: {VV : b<q xcmp> | true} |- {VV : c<p wcmp> | true} <: {VV : c<r xcmp> | true}} =>\n      lq_tmp$db##14:(ycmp:b -> {VV : c<p ycmp> | true}) -> lq_tmp$db##16:(zcmp:a -> {VV : b<q zcmp> | true}) -> xcmp:a -> {VV : c<r xcmp> | true} | VV == GHC.Base..}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":41,"startCol":40,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808487","{lq_tmp$x##2436 : GHC.Types.Double | lq_tmp$x##2436 == 5.0}"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":56,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base.$","{VV : forall r a b .\n      lq_tmp$x##1161:(lq_tmp$x##1160:a -> b) -> lq_tmp$x##1162:a -> b | VV == GHC.Base.$}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":32,"startCol":31,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808500","{lq_tmp$x##2640 : GHC.Types.Int | lq_tmp$x##2640 == lq_anf$##7205759403792808499##d3Sj}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":38,"startCol":37,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808502","{lq_tmp$x##2652 : GHC.Types.Double | lq_tmp$x##2652 == 9.0}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":40,"startCol":39,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808503","{lq_tmp$x##2658 : GHC.Types.Double | lq_tmp$x##2658 == 1.0}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":40,"startCol":33,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808471","{lq_tmp$x##2146 : [{lq_tmp$x##2156 : a | $k_##2155[VV##2154:=lq_tmp$x##2156][lq_tmp$x##2150:=lq_anf$##7205759403792808463##d3RJ][lq_tmp$x##2151:=lq_anf$##7205759403792808470##d3RQ]}]<\\lq_tmp$x##2153 VV -> {lq_tmp$x##2156 : a | $k_##2158[VV##2157:=lq_tmp$x##2156][lq_tmp$x##2150:=lq_anf$##7205759403792808463##d3RJ][lq_tmp$x##2151:=lq_anf$##7205759403792808470##d3RQ][lq_tmp$x##2159:=lq_tmp$x##2153]}> | tail lq_tmp$x##2146 == lq_anf$##7205759403792808470##d3RQ\n                                                                                                                                                                                                                                                                                                                                                                                                                   && head lq_tmp$x##2146 == lq_anf$##7205759403792808463##d3RJ\n                                                                                                                                                                                                                                                                                                                                                                                                                   && len lq_tmp$x##2146 == 1 + len lq_anf$##7205759403792808470##d3RQ}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":64,"startCol":57,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808483","{lq_tmp$x##2337 : [{lq_tmp$x##2347 : a | $k_##2346[VV##2345:=lq_tmp$x##2347][lq_tmp$x##2341:=lq_anf$##7205759403792808475##d3RV][lq_tmp$x##2342:=lq_anf$##7205759403792808482##d3S2]}]<\\lq_tmp$x##2344 VV -> {lq_tmp$x##2347 : a | $k_##2349[VV##2348:=lq_tmp$x##2347][lq_tmp$x##2341:=lq_anf$##7205759403792808475##d3RV][lq_tmp$x##2342:=lq_anf$##7205759403792808482##d3S2][lq_tmp$x##2350:=lq_tmp$x##2344]}> | tail lq_tmp$x##2337 == lq_anf$##7205759403792808482##d3S2\n                                                                                                                                                                                                                                                                                                                                                                                                                   && head lq_tmp$x##2337 == lq_anf$##7205759403792808475##d3RV\n                                                                                                                                                                                                                                                                                                                                                                                                                   && len lq_tmp$x##2337 == 1 + len lq_anf$##7205759403792808482##d3S2}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test4","(Data.Vector.Storable.Vector GHC.Types.Double)"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":59,"startCol":25,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808523","{lq_tmp$x##3057 : (Data.Vector.Storable.Vector GHC.Types.Double) | slen lq_tmp$x##3057 == len lq_anf$##7205759403792808522##d3SG}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":44,"startCol":42,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808490","{lq_tmp$x##2468 : GHC.Types.Double | lq_tmp$x##2468 == (-lq_anf$##7205759403792808489##d3S9)}"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":18,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808496","lq_tmp$x##2624:{lq_tmp$x##2618 : (Internal.Matrix.Matrix GHC.Types.Double) | natMatrix lq_tmp$x##2618} -> (Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":28,"startCol":27,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808449","{lq_tmp$x##1765 : GHC.Types.Double | lq_tmp$x##1765 == 3.0}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":48,"startCol":47,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808458","{lq_tmp$x##1907 : GHC.Types.Int | lq_tmp$x##1907 == lq_anf$##7205759403792808457##d3RD}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":24,"startCol":23,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808447","{lq_tmp$x##1753 : GHC.Types.Double | lq_tmp$x##1753 == 1.0}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":55,"startCol":50,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808460","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":71,"endLine":71,"endCol":43,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["GHC.Base.$","{VV : forall r a b .\n      lq_tmp$x##2841:(lq_tmp$x##2840:a -> b) -> lq_tmp$x##2842:a -> b | VV == GHC.Base.$}"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":50,"startCol":47,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808425","{lq_tmp$x##1352 : [{lq_tmp$x##1362 : GHC.Types.Double | $k_##1361[VV##1360:=lq_tmp$x##1362][lq_tmp$x##1356:=lq_anf$##7205759403792808423##d3R5][lq_tmp$x##1357:=lq_anf$##7205759403792808424##d3R6]}]<\\lq_tmp$x##1359 VV -> {lq_tmp$x##1362 : GHC.Types.Double | $k_##1364[VV##1363:=lq_tmp$x##1362][lq_tmp$x##1356:=lq_anf$##7205759403792808423##d3R5][lq_tmp$x##1357:=lq_anf$##7205759403792808424##d3R6][lq_tmp$x##1365:=lq_tmp$x##1359]}> | tail lq_tmp$x##1352 == lq_anf$##7205759403792808424##d3R6\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && head lq_tmp$x##1352 == lq_anf$##7205759403792808423##d3R5\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && len lq_tmp$x##1352 == 1 + len lq_anf$##7205759403792808424##d3R6}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":52,"startCol":51,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808459","{lq_tmp$x##1913 : GHC.Types.Double | lq_tmp$x##1913 == 1.0}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":47,"startCol":46,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808517","{lq_tmp$x##2912 : GHC.Types.Double | lq_tmp$x##2912 == 4.0}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":61,"startCol":60,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808477","{lq_tmp$x##2236 : a | lq_tmp$x##2236 == lq_anf$##7205759403792808476##d3RW}"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":27,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808418","[GHC.Types.Double]"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":20,"startCol":19,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808416","{lq_tmp$x##1194 : GHC.Types.Int | lq_tmp$x##1194 == lq_anf$##7205759403792808415##d3QX}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":59,"startCol":58,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808475","{lq_tmp$x##2221 : a | lq_tmp$x##2221 == lq_anf$##7205759403792808474##d3RU}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":24,"startCol":17,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808397","ds_d3QC:{VV##677 : t | $k_##678} -> {lq_tmp$x##684 : GHC.Types.Bool | lq_tmp$x##684 <=> ds_d3QC >= ds_d3QD}"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":24,"startCol":23,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808417","{lq_tmp$x##1200 : GHC.Types.Double | lq_tmp$x##1200 == 1.0}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":35,"startCol":34,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808463","{lq_tmp$x##2030 : a | lq_tmp$x##2030 == lq_anf$##7205759403792808462##d3RI}"]]],[{"spanInfo":{"startLine":65,"endLine":65,"endCol":37,"startCol":36,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808465","{lq_tmp$x##2045 : a | lq_tmp$x##2045 == lq_anf$##7205759403792808464##d3RK}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":47,"startCol":27,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808400","lq_tmp$x##770:[{lq_tmp$x##781 : (Data.Vector.Storable.Vector {lq_tmp$x##780 : t | $k_##777[VV##776:=lq_tmp$x##780][VV##778:=lq_tmp$x##781][lq_tmp$x##768:=Data.Foldable.$36$fFoldable$91$$93$][lq_tmp$x##769:=lq_anf$##7205759403792808399##d3QH]}) | $k_##779[VV##778:=lq_tmp$x##781][lq_tmp$x##768:=Data.Foldable.$36$fFoldable$91$$93$][lq_tmp$x##769:=lq_anf$##7205759403792808399##d3QH]}] -> [{lq_tmp$x##784 : t | $k_##783[VV##782:=lq_tmp$x##784][lq_tmp$x##768:=Data.Foldable.$36$fFoldable$91$$93$][lq_tmp$x##769:=lq_anf$##7205759403792808399##d3QH]}]"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":55,"startCol":52,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808408","{lq_tmp$x##1052 : GHC.Types.Char | lq_tmp$x##1052 == (lit \"50\" Char)}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test7","GHC.Types.Double"]]],[{"spanInfo":{"startLine":50,"endLine":50,"endCol":51,"startCol":48,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808407","{lq_tmp$x##1046 : GHC.Types.Char | lq_tmp$x##1046 == (lit \"49\" Char)}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":29,"startCol":22,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808453","{lq_tmp$x##1851 : [{lq_tmp$x##1861 : GHC.Types.Double | $k_##1860[VV##1859:=lq_tmp$x##1861][lq_tmp$x##1855:=lq_anf$##7205759403792808447##d3Rt][lq_tmp$x##1856:=lq_anf$##7205759403792808452##d3Ry]}]<\\lq_tmp$x##1858 VV -> {lq_tmp$x##1861 : GHC.Types.Double | $k_##1863[VV##1862:=lq_tmp$x##1861][lq_tmp$x##1855:=lq_anf$##7205759403792808447##d3Rt][lq_tmp$x##1856:=lq_anf$##7205759403792808452##d3Ry][lq_tmp$x##1864:=lq_tmp$x##1858]}> | tail lq_tmp$x##1851 == lq_anf$##7205759403792808452##d3Ry\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && head lq_tmp$x##1851 == lq_anf$##7205759403792808447##d3Rt\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && len lq_tmp$x##1851 == 1 + len lq_anf$##7205759403792808452##d3Ry}"]]],[{"spanInfo":{"startLine":62,"endLine":62,"endCol":55,"startCol":37,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808461","{lq_tmp$x##1944 : (Internal.Matrix.Matrix GHC.Types.Double) | cols lq_tmp$x##1944 == lq_anf$##7205759403792808458##d3RE\n                                                              && rows lq_tmp$x##1944 == lq_anf$##7205759403792808456##d3RC}"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":10,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.natMatrix","forall t .\n(GHC.Classes.Ord<[]> t, GHC.Num.Num<[]> t, Foreign.Storable.Storable<[]> t, Internal.Matrix.Element<[]> t) =>\nlq_tmp$x##647:(Internal.Matrix.Matrix t) -> GHC.Types.Bool"]]],[{"spanInfo":{"startLine":19,"endLine":19,"endCol":61,"startCol":27,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808402","xcmp:{lq_tmp$x##853 : (Internal.Matrix.Matrix {lq_tmp$x##852 : t | $k_##849[VV##848:=lq_tmp$x##852][VV##850:=lq_tmp$x##853][lq_tmp$db##14:=lq_anf$##7205759403792808400##d3QI][lq_tmp$db##16:=lq_anf$##7205759403792808401##d3QJ]}) | $k_##851[VV##850:=lq_tmp$x##853][lq_tmp$db##14:=lq_anf$##7205759403792808400##d3QI][lq_tmp$db##16:=lq_anf$##7205759403792808401##d3QJ]} -> {lq_tmp$x##847 : [{lq_tmp$x##844 : t | $k_##838[VV##837:=lq_tmp$x##844][VV##842:=lq_tmp$x##847][VV##854:=lq_tmp$x##844][VV##857:=lq_tmp$x##846][VV##859:=lq_tmp$x##847][lq_tmp$db##14:=lq_anf$##7205759403792808400##d3QI][lq_tmp$db##16:=lq_anf$##7205759403792808401##d3QJ]\n                                                                                                                                                                                                                                                                                                                                                                                                                        && $k_##855[VV##854:=lq_tmp$x##844][VV##857:=lq_tmp$x##846][VV##859:=lq_tmp$x##847][lq_tmp$db##14:=lq_anf$##7205759403792808400##d3QI][lq_tmp$db##16:=lq_anf$##7205759403792808401##d3QJ][lq_tmp$x##861:=xcmp]}]<\\lq_tmp$x##845 VV -> {lq_tmp$x##846 : t | $k_##841[VV##840:=lq_tmp$x##846][VV##842:=lq_tmp$x##847][VV##854:=lq_tmp$x##844][VV##857:=lq_tmp$x##846][VV##859:=lq_tmp$x##847][lq_tmp$db##14:=lq_anf$##7205759403792808400##d3QI][lq_tmp$db##16:=lq_anf$##7205759403792808401##d3QJ][lq_tmp$x##839:=lq_tmp$x##845]\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   && $k_##858[VV##854:=lq_tmp$x##844][VV##857:=lq_tmp$x##846][VV##859:=lq_tmp$x##847][lq_tmp$db##14:=lq_anf$##7205759403792808400##d3QI][lq_tmp$db##16:=lq_anf$##7205759403792808401##d3QJ][lq_tmp$x##861:=xcmp]}> | $k_##843[VV##842:=lq_tmp$x##847][lq_tmp$db##14:=lq_anf$##7205759403792808400##d3QI][lq_tmp$db##16:=lq_anf$##7205759403792808401##d3QJ]\nk_##860[VV##859:=lq_tmp$x##847][lq_tmp$db##14:=lq_anf$##7205759403792808400##d3QI][lq_tmp$db##16:=lq_anf$##7205759403792808401##d3QJ][lq_tmp$x##861:=xcmp]}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":63,"startCol":53,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808445","{lq_tmp$x##1685 : [{lq_tmp$x##1695 : GHC.Types.Double | $k_##1694[VV##1693:=lq_tmp$x##1695][lq_tmp$x##1689:=lq_anf$##7205759403792808439##d3Rl][lq_tmp$x##1690:=lq_anf$##7205759403792808444##d3Rq]}]<\\lq_tmp$x##1692 VV -> {lq_tmp$x##1695 : GHC.Types.Double | $k_##1697[VV##1696:=lq_tmp$x##1695][lq_tmp$x##1689:=lq_anf$##7205759403792808439##d3Rl][lq_tmp$x##1690:=lq_anf$##7205759403792808444##d3Rq][lq_tmp$x##1698:=lq_tmp$x##1692]}> | tail lq_tmp$x##1685 == lq_anf$##7205759403792808444##d3Rq\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && head lq_tmp$x##1685 == lq_anf$##7205759403792808439##d3Rl\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 && len lq_tmp$x##1685 == 1 + len lq_anf$##7205759403792808444##d3Rq}"]]],[{"spanInfo":{"startLine":74,"endLine":74,"endCol":6,"startCol":1,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["Algebra.test9","(Internal.Matrix.Matrix GHC.Types.Double)"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":25,"startCol":23,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808431","{lq_tmp$x##1435 : GHC.Types.Double | lq_tmp$x##1435 == 10.0}"]]],[{"spanInfo":{"startLine":59,"endLine":59,"endCol":59,"startCol":57,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808440","{lq_tmp$x##1593 : GHC.Types.Double | lq_tmp$x##1593 == 20.0}"]]],[{"spanInfo":{"startLine":68,"endLine":68,"endCol":59,"startCol":20,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true},[["lq_anf$##7205759403792808495","{lq_tmp$x##2583 : (Data.Vector.Storable.Vector GHC.Types.Double) | slen lq_tmp$x##2583 == len lq_anf$##7205759403792808494##d3Se}"]]]],"o_bots":[],"o_result":{"tag":"Unsafe","contents":[{"numCstr":18,"numIter":18,"numBrkt":18,"numChck":18,"numVald":17},[{"msg":"Liquid Type Mismatch\n    .\n    The inferred type\n      VV : (Internal.Matrix.Matrix GHC.Types.Double)\n    .\n    is not a subtype of the required type\n      VV : {VV : (Internal.Matrix.Matrix GHC.Types.Double) | natMatrix VV}\n    .","pos":{"spanInfo":{"startLine":71,"endLine":71,"endCol":18,"startCol":9,"filename":"/home/alexander/haskell/project/neuroLiquid/app/Algebra.hs"},"realSpan":true}}]]}}